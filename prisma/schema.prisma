// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                       String  @id @default(cuid())
    userId                   String  @map("user_id")
    type                     String
    provider                 String
    providerAccountId        String  @map("provider_account_id")
    refresh_token            String? // @db.Text
    access_token             String? // @db.Text
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String? // @db.Text
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
    @@map("accounts")
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique @map("session_token")
    userId       String   @map("user_id")
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("sessions")
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String?   @unique
    emailVerified DateTime? @map("email_verified")
    image         String?
    accounts      Account[]
    sessions      Session[]
    bases         Base[]

    @@map("users")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
    @@map("verification_tokens")
}

model Base {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    name   String
    tables Table[]

    user   User   @relation(fields: [userId], references: [id])
    userId String @map("user_id")

    @@map("bases")
}

model Table {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    index Int

    name    String
    rows    Row[]
    base    Base?    @relation(fields: [baseId], references: [id])
    baseId  String?  @map("base_id")
    columns Column[]

    views View[]

    @@map("tables")
}

enum ColumnType {
    TEXT
    NUMBER
}

model Column {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    index Int

    name String
    type ColumnType

    table   Table  @relation(fields: [tableId], references: [id])
    tableId String @map("table_id")
    cells   Cell[]

    @@map("columns")
}

model Row {
    id        String   @id @default(uuid())
    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    table   Table?  @relation(fields: [tableId], references: [id])
    tableId String? @map("table_id")

    index Int
    cells Cell[]

    @@map("rows")
}

model Cell {
    id       String @id @default(uuid())
    row      Row    @relation(fields: [rowId], references: [id])
    column   Column @relation(fields: [columnId], references: [id])
    rowId    String @map("row_id")
    columnId String @map("column_id")

    intValue  Int?    @map("int_value")
    textValue String? @map("text_value")

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    @@map("cells")
}

model View {
    id   String @id @default(uuid())
    name String

    tableId String @map("table_id")
    table   Table  @relation(fields: [tableId], references: [id])

    sorting       Json
    columnFilters Json    @map("column_filters")
    query         String?

    createdAt DateTime @default(now()) @map("created_at")
    updatedAt DateTime @updatedAt @map("updated_at")

    lastSeen DateTime? @map("last_seen")

    @@map("views")
}
